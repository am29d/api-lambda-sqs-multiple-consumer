AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  api-lambda-sqs-multiple-consumer

  Powertools example

Globals:
  Function:
    Timeout: 15
    MemorySize: 256
    Runtime: python3.12
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  OrderIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      CodeUri: app
      Description: Funciton to process orders requests
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        RootPath:
          Type: Api
          Properties:
            Path: /
            Method: POST
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: OrderService
          POWERTOOLS_METRICS_NAMESPACE: OrderService
          LOG_LEVEL: INFO
          ORDERS_QUEUE_URL: !Ref OrdersQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt OrdersQueue.QueueName
      Tags:
        LambdaPowertools: python

  OrderJsonConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: consumer_json.handler
      CodeUri: app
      Description: Function to process JSON orders
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        OrderEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrdersQueue.Arn
            FilterCriteria:
              Filters:
                - Pattern: '{"messageAttributes": {"eventType": {"stringValue": ["json_order"]}}}'

      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: OrderService
          POWERTOOLS_METRICS_NAMESPACE: OrderService
          LOG_LEVEL: INFO
          ORDERS_TABLE: !Ref OrdersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Tags:
        LambdaPowertools: python

  OrderXmlConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: consumer_xml.handler
      CodeUri: app
      Description: Function to process XML orders
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        OrderEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrdersQueue.Arn
            FilterCriteria:
              Filters:
                - Pattern: '{"messageAttributes": {"eventType": {"stringValue": ["xml_order"]}}}'

      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: OrderService
          POWERTOOLS_METRICS_NAMESPACE: OrderService
          LOG_LEVEL: INFO
          ORDERS_TABLE: !Ref OrdersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Tags:
        LambdaPowertools: python

  OrdersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQeue

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Service
          Value: OrderService

Outputs:
  OrderApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  OrdersTableName:
    Description: "DynamoDB Orders table name"
    Value: !Ref OrdersTable
